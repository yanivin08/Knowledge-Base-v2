var category = document.getElementById('categoryList'),
	month = document.getElementById('monthList'),
	day = document.getElementById('dayList'),
	year = document.getElementById('yearList'),
	trainTitle = document.getElementById('trainTitle'),
	trainCategory = document.getElementById('trainCategory').getElementsByTagName('select')[0],
	trainEmp = document.getElementById('trainEmpID'),
	trainMonth = document.getElementById('trainMonth').getElementsByTagName('select')[0],
	trainDay = document.getElementById('trainDay').getElementsByTagName('select')[0],
	trainYear = document.getElementById('trainYear').getElementsByTagName('select')[0],
	err = document.getElementById('errorMsg'),
	msg = document.getElementById('msgBx').getElementsByTagName('span')[0],
	fsObj = new ActiveXObject("Scripting.FileSystemObject"),
	tools, chart;
	
var svgView = false;
var processArray = [], editTxt, oldArray = [];

var srcPath = document.getElementsByTagName('script')[0].src,
	docPath = srcPath.substring(0,srcPath.lastIndexOf("/"));
	docPath = docPath.replaceAll("%20"," ").substring(filePathIndex(docPath),docPath.length);

function onLoad(){
	
	var id=checkUser();
	
	var txt = fsObj.OpenTextFile(docPath + "/edit/" + id + ".ed", 1);
		editTxt = JSON.parse(txt.readAll());
		txt.Close();
	
	var editMonth = editTxt.date.split(" ")[0],
		editDay = editTxt.date.split(" ")[1],
		editYear = editTxt.date.split(" ")[2];
		
		editDay = editDay.substring(0,editDay.length - 1);
	
	data.map(function(x){
		if(x.title == editTxt.title && x.date == editTxt.date && x.category == editTxt.category && x.module == editTxt.module){
		
			trainTitle.value = x.title;
			trainCategory.value = x.category;
			trainEmp.value = id;
			trainMonth.value = editMonth;
			trainDay.value = editDay;
			trainYear.value = editYear;
			
			showproMap()
	
			txtPath = src + x.path.substring(0,x.path.lastIndexOf("."))
			
			document.getElementById('shapeHolder').innerHTML = readFile(txtPath + ".tx");
			
			shapes = JSON.parse(readFile(txtPath + ".ta"));
			lines = JSON.parse(readFile(txtPath + ".tl"));
			oldArray = JSON.parse(readFile(txtPath + ".tr"));
			
			shapes.map(function(i){
				oldArray.map(function(j){
					if(i.id == j.id){
						(j.image == "none") ? i.image = "" : i.image = j.image;
						(j.file == "none") ? i.file = "" : i.file = j.file;
					}
				});
			});
			
			console.log(oldArray);
			
			var svgChart = document.getElementById('Workspace');
			
			var svgChart = document.getElementById('svgChart');
			var txtElement = readFile(txtPath + ".ts")
			
			svgChart.removeChild(svgChart.lastChild);
			svgChart.innerHTML += txtElement;
			
			chart.g = document.getElementById("Workspace");
			
			var svgTools = document.getElementById('svgTools');
			
			svgTools.getElementsByTagName('svg')[0].setAttribute('height',svgTools.getBoundingClientRect().height);
			svgTools.getElementsByTagName('svg')[0].setAttribute('width',svgTools.getBoundingClientRect().width);
			
			var shapeHolder = document.getElementById('shapeHolder');
			
			shapes.map(function(i){
				i.element = document.getElementById(i.id);
				for(var j=0;j<shapeHolder.children.length;j++){
					if(shapeHolder.children[j].getAttribute('shape-reference') == i.id && shapeHolder.children[j].getAttribute('label') == null){
						i.textElement = shapeHolder.children[j];
					}
				}
			});
			
			lines.map(function(i){
				i.element = document.getElementById(i.id);
			});
			
			hideproMap()
			
		}
	});

}

function editTraining(){
	if(trainTitle.value != "" && trainCategory.value != "" && trainEmp.value != "" && trainMonth.value != "" && trainDay.value != "" &&
		trainYear.value != ""){
		var id = checkUser();
		
		if(id == trainEmp.value){
			if(approveId.indexOf(id) != -1){
				if(shapes.length > 0){
					
					data.map(function(x){
						if(x.title == editTxt.title && x.date == editTxt.date && x.category == editTxt.category && x.module == editTxt.module){
							
							checkArray();
							
							var dest = docPath.substring(0,docPath.lastIndexOf("/")) + "/";						
							
							processArray.map(function(i){
							
								var indID = oldArray.map(function(j){ return j.id }).indexOf(i.id);
								
								if(indID == -1){
									if(i.image != ""){
										var fileExt = i.image.substring(i.image.lastIndexOf("."),i.image.length);
										var fileName = randomID() + trainDay.value + fileExt;
											fsObj.CopyFile(i.image, dest + "img/training/" + fileName, false); /*copy from or 	ig to dest*/
											i.image = "img/training/" + fileName;
									}else{
										i.image = "none";
									}
									
									if(i.file != ""){
										var fileExt = i.image.substring(i.image.lastIndexOf("."),i.image.length);
										var fileName = randomID() + trainDay.value + fileExt;
										fsObj.CopyFile(i.image, dest + "img/training/" + fileName, false); /*copy from orig to dest*/
										i.file = "img/training/" + fileName;
									}else{
										i.file = "none";
									}
								}else{
									if(i.image != oldArray[indID].image){
										if(i.image != ""){
											var fileExt = i.image.substring(i.image.lastIndexOf("."),i.image.length);
											var fileName = randomID() + trainDay.value + fileExt;
												fsObj.CopyFile(i.image, dest + "img/training/" + fileName, false); /*copy from or 	ig to dest*/
												i.image = "img/training/" + fileName;
										}else{
											i.image = "none";
										}
									}
									if(i.file != oldArray[indID].file){
										if(i.file != ""){
											var fileExt = i.image.substring(i.image.lastIndexOf("."),i.image.length);
											var fileName = randomID() + trainDay.value + fileExt;
											fsObj.CopyFile(i.image, dest + "img/training/" + fileName, false); /*copy from orig to dest*/
											i.file = "img/training/" + fileName;
										}else{
											i.file = "none";
										}
									}
								}
							});
							
							var textContent = JSON.stringify(processArray);
							
							var txtMain = (src.substring(filePathIndex(src)) + x.path).replaceAll("%20"," "),
								txtArray = txtMain.substring(0,txtMain.indexOf('.')) + ".ta",
								txtShapes = txtMain.substring(0,txtMain.indexOf('.')) + ".ts",
								txtLines = txtMain.substring(0,txtMain.indexOf('.')) + ".tl",
								txtText = txtMain.substring(0,txtMain.indexOf('.')) + ".tx";
								
							var txt = fsObj.CreateTextFile(txtMain, true);
								txt.writeline(textContent);
								txt.Close();
								
								txt = fsObj.CreateTextFile(txtArray, true);
								txt.writeline(JSON.stringify(shapes));
								txt.Close();
								
							var svgChart = document.getElementById('svgChart').innerHTML
								
								txt = fsObj.CreateTextFile(txtShapes, true);
								txt.writeline(svgChart.substring(svgChart.indexOf('<svg')));
								txt.Close();
								
								txt = fsObj.CreateTextFile(txtLines, true);
								txt.writeline(JSON.stringify(lines));
								txt.Close();
								
								txt = fsObj.CreateTextFile(txtText, true);
								txt.writeline(document.getElementById('shapeHolder').innerHTML);
								txt.Close();
								
							var txtName = txtMain.substring(txtMain.indexOf('docs/')+4);
							
							data.forEach(function(k){
								if(k.title == editTxt.title && k.date == editTxt.date && k.module == editTxt.module && k.category == editTxt.category){
									k.title = trainTitle.value;
									k.category = trainCategory.value;
									k.date = trainMonth.value + " " + trainDay.value + ", " + trainYear.value;
									k.empid = trainEmp.value;
								}
							});
								
							var jsonPath = docPath + "/updates.txt",
								jsonWrite = fsObj.OpenTextFile(jsonPath, 2);
								jsonWrite.WriteLine(JSON.stringify(data));
								jsonWrite.Close();

						}
					});
				
					alert("Module has been updated!");
					window.close();
					
				}else{
					msg.innerText = "Please create a process map"
					err.style.display = "block";
					err.style.opacity = "1";
				}
			}else{
				msg.innerText = "You are not authorized to upload and amend any updates in this tool."
				err.style.display = "block";
				err.style.opacity = "1";
			}
		}else{
			msg.innerText = "Seems like you are trying to use other Employee ID, please try again."
			err.style.display = "block";
			err.style.opacity = "1";
		}
	}else{
		msg.innerText = "Please fill up all required field before uploading the form"
		err.style.display = "block";
		err.style.opacity = "1";
	}
}

function hideError(){
	var err = document.getElementById('errorMsg');
		err.style.display = "none";
		err.style.opacity = "0";
}

function showproMap(){
	document.getElementById('process-map').style.display = 'block';
	viewSVG();
}

function hideproMap(){
	document.getElementById('process-map').style.display = 'none';
}

function viewSVG(){
	if(!svgView){
		var mDown = false

		var svgTools = document.querySelector('#svgTools'),
			svgChart = document.querySelector('#svgChart');
			
		tools = new SVG(svgTools,'Tools');
		chart = new SVG(svgChart,'Workspace');
				
		tools.showTools();

		svgChart.addEventListener('mousedown',function(e){
			mDown = true;
			chart.addShape(e.clientX,e.clientY,e.target);
			chart.selectShape(e.clientX,e.clientY,e.target);
		});

		svgChart.addEventListener('mouseup',function(e){
			mDown = false;		
			chart.updateShape(e.clientX,e.clientY,e.target,false);
		});

		svgChart.addEventListener('mousemove',function(e){		
			if(mDown){
				chart.updateShape(e.clientX,e.clientY,e.target,true);
				chart.moveShape(e.clientX,e.clientY,e.target);
				chart.resizeShape(e.clientX,e.clientY,e.target);
			}else{
				chart.restyleShape(e.clientX,e.clientY,e.target);
			}
		});
		svgView = true;
	}
}

function createArray(i){

	var indexId = (processArray.length > 0) ? processArray.map(function(j){ return j.id; }).indexOf(shapes[i].id) : -1;
	
	if(indexId == -1){
		var temp = {};
		var nextInd, nextIndY, nextIndN;
		
		temp.text = shapes[i].text;
		temp.id = shapes[i].id;
		temp.type = shapes[i].name;
		temp.image = shapes[i].image;
		temp.file = shapes[i].file;
		
		if(shapes[i].step != "LAST"){
			
			if(shapes[i].shape != "Diamond"){
			
				temp.connectedTo = shapes[i].connectedTo;
				processArray.push(temp);
				
				nextInd = shapes.map(function(j){ return j.id; }).indexOf(shapes[i].connectedTo);
				createArray(nextInd);
				
			}else{
			
				temp.connectedTo = {};
				temp.connectedTo.yes = shapes[i].yes.id;
				temp.connectedTo.no = shapes[i].no.id;
				processArray.push(temp);
				
				nextIndY = shapes.map(function(j){ return j.id; }).indexOf(shapes[i].yes.id);
				createArray(nextIndY);
				
				nextIndN = shapes.map(function(j){ return j.id; }).indexOf(shapes[i].no.id);
				createArray(nextIndN);
				
			}
		}else{
		
			processArray.push(temp);
		}
	}
}

function checkArray(){
	startInd = shapes.map(function(i){ return i.step; }).indexOf("FIRST");
	lastInd = shapes.map(function(i){ return i.step; }).indexOf("LAST");
	
	if(startInd == -1 || lastInd == -1){
		msg.innerText = "Process map has not yest finished. Please double check"
		err.style.display = "block";
		err.style.opacity = "1";
	}else{
		if(shapes[startInd].connectedTo == "" || shapes[lastInd].connectedFrom == ""){
			msg.innerText = "Shapes has not connected properly, please double check"
			err.style.display = "block";
			err.style.opacity = "1";
		}else{
			processArray = [];
			createArray(startInd);
		}
	}
}